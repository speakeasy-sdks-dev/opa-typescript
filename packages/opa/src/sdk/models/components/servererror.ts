/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type Location = {
  file: string;
  row: number;
  col: number;
};

export type Errors = {
  code: string;
  message: string;
  location?: Location | undefined;
};

export type ServerError = {
  code: string;
  message: string;
  errors?: Array<Errors> | undefined;
  decisionId?: string | undefined;
};

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.string(),
  row: z.number().int(),
  col: z.number().int(),
});

/** @internal */
export type Location$Outbound = {
  file: string;
  row: number;
  col: number;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  file: z.string(),
  row: z.number().int(),
  col: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string(),
    message: z.string(),
    location: z.lazy(() => Location$inboundSchema).optional(),
  });

/** @internal */
export type Errors$Outbound = {
  code: string;
  message: string;
  location?: Location$Outbound | undefined;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  code: z.string(),
  message: z.string(),
  location: z.lazy(() => Location$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

/** @internal */
export const ServerError$inboundSchema: z.ZodType<
  ServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  errors: z.array(z.lazy(() => Errors$inboundSchema)).optional(),
  decision_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "decision_id": "decisionId",
  });
});

/** @internal */
export type ServerError$Outbound = {
  code: string;
  message: string;
  errors?: Array<Errors$Outbound> | undefined;
  decision_id?: string | undefined;
};

/** @internal */
export const ServerError$outboundSchema: z.ZodType<
  ServerError$Outbound,
  z.ZodTypeDef,
  ServerError
> = z.object({
  code: z.string(),
  message: z.string(),
  errors: z.array(z.lazy(() => Errors$outboundSchema)).optional(),
  decisionId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    decisionId: "decision_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServerError$ {
  /** @deprecated use `ServerError$inboundSchema` instead. */
  export const inboundSchema = ServerError$inboundSchema;
  /** @deprecated use `ServerError$outboundSchema` instead. */
  export const outboundSchema = ServerError$outboundSchema;
  /** @deprecated use `ServerError$Outbound` instead. */
  export type Outbound = ServerError$Outbound;
}
